{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-currency/src/currency-mask.config.ts","ng://ngx-currency/src/input.manager.ts","ng://ngx-currency/src/input.service.ts","ng://ngx-currency/src/input.handler.ts","ng://ngx-currency/src/currency-mask.directive.ts","ng://ngx-currency/src/currency-mask.module.ts"],"names":["CurrencyMaskInputMode","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","CURRENCY_MASK_CONFIG","InjectionToken","InputManager","htmlInputElement","this","prototype","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","haventReachedMaxLength","replace","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","selection","createRange","parentElement","lenght","normalizedValue","startRange","moveToBookmark","getBookmark","endRange","compareEndPoints","slice","split","_storedRawValue","InputService","options","SINGLE_DIGIT_REGEX","RegExp","ONLY_NUMBERS_REGEX","PER_AR_NUMBER","Map","inputManager","initialize","set","addNumber","keyCode","_a","decimal","precision","inputMode","keyChar","String","fromCharCode","isDecimalChar","rawValueStart","rawValueEnd","inDecimalPortion","indexOf","NATURAL","newValue","nextSelectionStart","thousands","test","updateFieldValue","applyMask","undefined","isNumber","disablePadAndTrim","allowNegative","prefix","suffix","min","max","onlyNumbers","Number","toFixed","padOrTrimPrecision","integerPart","integerValue","parseInt","startsWith","decimalPart","decimalValue","isNegative","isNullOrUndefined","Math","repeat","decimalIndex","lastIndexOf","decimalPortion","actualPrecision","clearMask","isNullable","forEach","val","re","parseFloat","changeToNegative","charAt","changeToPositive","removeNumber","suffixStart","shiftSelection","insertChars","substr","replacedDecimalCount","selectionFromEnd","updateOptions","prefixLength","suffixLength","nullable","canInputMoreNumbers","storedRawValue","InputHandler","inputService","handleCut","event","_this","setTimeout","setValue","onModelChange","handleInput","charCodeAt","rawValueLength","rawValueSelectionEnd","storedRawValueLength","abs","setCursorPosition","handleKeydown","which","charCode","preventDefault","clearValue","handleKeypress","ctrlKey","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","allowZero","FINANCIAL","keyValueDiffer","find","create","ngAfterViewInit","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","assign","ngOnInit","handleBlur","apply","isChromeAndroid","isReadOnly","handleDrop","navigator","userAgent","hasAttribute","registerOnChange","registerOnTouched","setDisabledState","disabled","writeValue","Optional","type","Inject","args","ElementRef","KeyValueDiffers","tslib_1.__decorate","Input","HostListener","Directive","selector","providers","tslib_1.__param","NgxCurrencyModule","forRoot","config","ngModule","NgxCurrencyModule_1","useValue","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {InjectionToken} from \"@angular/core\";\n\nexport interface CurrencyMaskConfig {\n  align: string;\n  allowNegative: boolean;\n  allowZero: boolean;\n  decimal: string;\n  precision: number;\n  prefix: string;\n  suffix: string;\n  thousands: string;\n  nullable: boolean;\n  min?: number;\n  max?: number;\n  inputMode? : CurrencyMaskInputMode;\n}\n\nexport enum CurrencyMaskInputMode {\n  FINANCIAL,\n  NATURAL,\n}\n\nexport let CURRENCY_MASK_CONFIG = new InjectionToken<CurrencyMaskConfig>(\"currency.mask.config\");\n","export class InputManager {\n\n    private _storedRawValue: string;\n\n    constructor(private htmlInputElement: any) {\n    }\n\n    setCursorAt(position: number): void {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        } else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n\n    updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n\n    get canInputMoreNumbers(): boolean {\n        let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\n        let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = !!(selectionStart != selectionEnd &&\n                                    this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n\n    get inputSelection(): any {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        } else {\n            let range = (<any>document).selection.createRange();\n\n            if (range && range.parentElement() == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                startRange.moveToBookmark(range.getBookmark());\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                } else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    } else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n        };\n    }\n\n    get rawValue(): string {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n\n    set rawValue(value: string) {\n        this._storedRawValue = value;\n\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n\n    get storedRawValue(): string {\n        return this._storedRawValue;\n    }\n}\n","import { InputManager } from \"./input.manager\";\nimport { CurrencyMaskConfig, CurrencyMaskInputMode } from \"./currency-mask.config\";\n\nexport class InputService {\n    private SINGLE_DIGIT_REGEX: RegExp = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n    private ONLY_NUMBERS_REGEX: RegExp = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n\n    PER_AR_NUMBER: Map<string, string> = new Map<string, string>();\n\n    initialize() {\n        this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\n        this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\n        this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\n        this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\n        this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\n        this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\n        this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\n        this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\n        this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\n        this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\n\n        this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\n        this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\n        this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\n        this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\n        this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\n        this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\n        this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\n        this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\n        this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\n        this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\n    }\n\n    inputManager: InputManager;\n\n    constructor(private htmlInputElement: any, private options: CurrencyMaskConfig) {\n        this.inputManager = new InputManager(htmlInputElement);\n        this.initialize()\n    }\n\n    addNumber(keyCode: number): void {\n        const {decimal, precision, inputMode} = this.options;\n        let keyChar = String.fromCharCode(keyCode);\n        const isDecimalChar = keyChar === this.options.decimal;\n\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, keyChar);\n            let selectionStart:number = undefined;\n            if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\n                selectionStart = this.rawValue.indexOf(decimal);\n                if (isDecimalChar) {\n                    selectionStart++;\n                }\n            }\n            this.updateFieldValue(selectionStart);\n        } else {\n            let selectionStart = this.inputSelection.selectionStart;\n            let selectionEnd = this.inputSelection.selectionEnd;\n            const rawValueStart = this.rawValue.substring(0, selectionStart);\n            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\n\n            // In natural mode, replace decimals instead of shifting them.\n            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n            if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\n              rawValueEnd = rawValueEnd.substring(1);\n            }\n\n            const newValue = rawValueStart + keyChar + rawValueEnd;\n            let nextSelectionStart = selectionStart + 1;\n            const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\n            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n                // If the cursor is just before the decimal or thousands separator and the user types the\n                // decimal or thousands separator, move the cursor past it.\n                nextSelectionStart++;\n            } else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\n                // Ignore other non-numbers.\n                return;\n            }\n\n            this.rawValue = newValue;\n            this.updateFieldValue(nextSelectionStart);\n        }\n    }\n\n    applyMask(isNumber: boolean, rawValue: string, disablePadAndTrim = false): string {\n        let {allowNegative, decimal, precision, prefix, suffix, thousands, min, max, inputMode} = this.options;\n\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n\n        if (!onlyNumbers && rawValue !== decimal) {\n            return \"\";\n        }\n\n        if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\n            rawValue = this.padOrTrimPrecision(rawValue);\n            onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n        }\n\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision)\n            .replace(/^\\u0660*/g, \"\")\n            .replace(/^\\u06F0*/g, \"\")\n            .replace(/^0*/g, \"\");\n\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let integerValue = parseInt(integerPart);\n\n        integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n        if (thousands && integerPart.startsWith(thousands)) {\n            integerPart = integerPart.substring(1);\n        }\n\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        let decimalValue = parseInt(decimalPart) || 0;\n\n        let isNegative = rawValue.indexOf(\"-\") > -1;\n\n        // Ensure max is at least as large as min.\n        max = (this.isNullOrUndefined(max) || this.isNullOrUndefined(min)) ? max : Math.max(max, min);\n\n        // Restrict to the min and max values.\n        let newValue = integerValue + (decimalValue / 100);\n        newValue = isNegative ? -newValue : newValue;\n        if (!this.isNullOrUndefined(max) && newValue > max) {\n            return this.applyMask(true, max + '');\n        } else if (!this.isNullOrUndefined(min) && newValue < min) {\n            return this.applyMask(true, min + '');\n        }\n\n        if (precision > 0) {\n            if (newRawValue == \"0\" && decimalPart.length < precision) {\n                newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\n            } else {\n                newRawValue += decimal + decimalPart;\n            }\n        }\n\n        let isZero = newValue == 0;\n        let operator = (isNegative && allowNegative && !isZero) ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n\n    padOrTrimPrecision(rawValue: string): string {\n        let {decimal, precision} = this.options;\n\n        let decimalIndex = rawValue.lastIndexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = rawValue.length;\n            rawValue += decimal;\n        }\n\n        let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\n        const actualPrecision = decimalPortion.length;\n        if (actualPrecision < precision) {\n            for (let i = actualPrecision; i < precision; i++) {\n                decimalPortion += '0';\n            }\n        } else if (actualPrecision > precision) {\n            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n        }\n\n        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n    }\n\n    clearMask(rawValue: string): number {\n        if (this.isNullable() && rawValue === \"\")\n            return null;\n\n        let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n\n        this.PER_AR_NUMBER.forEach((val: string, key: string) => {\n            const re = new RegExp(key, \"g\");\n            value = value.replace(re, val);\n        });\n        return parseFloat(value);\n    }\n\n    changeToNegative(): void {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            // Apply the mask to ensure the min and max values are enforced.\n            this.rawValue = this.applyMask(false, \"-\" + this.rawValue);\n        }\n    }\n\n    changeToPositive(): void {\n        // Apply the mask to ensure the min and max values are enforced.\n        this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\n    }\n\n    removeNumber(keyCode: number): void {\n        let {decimal, thousands, prefix, suffix, inputMode} = this.options;\n\n        if (this.isNullable() && this.value == 0) {\n            this.rawValue = null;\n            return;\n        }\n\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n\n        const suffixStart = this.rawValue.length - suffix.length;\n        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\n\n        // Check if selection was entirely in the prefix or suffix. \n        if (selectionStart === selectionEnd &&\n            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n            this.updateFieldValue(selectionStart);\n            return;\n        }\n\n        let decimalIndex = this.rawValue.indexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = this.rawValue.length;\n        }\n\n        let shiftSelection = 0;\n        let insertChars = '';   \n        if (selectionEnd === selectionStart) {\n            if (keyCode == 8) {\n                if (selectionStart <= prefix.length) {\n                    return;\n                }\n                selectionStart--;\n\n                // If previous char isn't a number, go back one more.\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n                    selectionStart--;\n                }\n\n                // In natural mode, jump backwards when in decimal portion of number.\n                if (inputMode === CurrencyMaskInputMode.NATURAL && decimalIndex < selectionEnd) {\n                    shiftSelection = -1;\n                }\n            } else if (keyCode == 46 || keyCode == 63272) {\n                if (selectionStart === suffixStart) {\n                    return;\n                }\n                selectionEnd++;\n\n                // If next char isn't a number, go one more.\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n                    selectionStart++;\n                    selectionEnd++;\n                }\n            }\n        }\n\n        // In natural mode, replace decimals with 0s.\n        if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\n            const replacedDecimalCount = selectionEnd - selectionStart;\n            for (let i = 0; i < replacedDecimalCount; i++) {\n                insertChars += '0';\n            }\n        }\n\n        let selectionFromEnd = this.rawValue.length - selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);\n\n        // Remove leading thousand separator from raw value.\n        const startChar = this.rawValue.substr(prefix.length, 1);\n        if (startChar === thousands) {\n            this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n        }\n\n        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n    }\n\n    updateFieldValue(selectionStart?: number, disablePadAndTrim = false): void {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n\n    updateOptions(options: any): void {\n        let value: number = this.value;\n        this.options = options;\n        this.value = value;\n    }\n\n    prefixLength(): any {\n        return this.options.prefix.length;\n    }\n\n    suffixLength(): any {\n        return this.options.suffix.length;\n    }\n\n    isNullable() {\n        return this.options.nullable;\n    }\n\n    get canInputMoreNumbers(): boolean {\n        return this.inputManager.canInputMoreNumbers;\n    }\n\n    get inputSelection(): any {\n        return this.inputManager.inputSelection;\n    }\n\n    get rawValue(): string {\n        return this.inputManager.rawValue;\n    }\n\n    set rawValue(value: string) {\n        this.inputManager.rawValue = value;\n    }\n\n    get storedRawValue(): string {\n        return this.inputManager.storedRawValue;\n    }\n\n    get value(): number {\n        return this.clearMask(this.rawValue);\n    }\n\n    set value(value: number) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n\n    private isNullOrUndefined(value: any) {\n        return value === null || value === undefined;\n    }\n}\n","import {InputService} from \"./input.service\";\n\nexport class InputHandler {\n\n    private inputService: InputService;\n    private onModelChange: Function;\n    private onModelTouched: Function;\n\n    constructor(htmlInputElement: HTMLInputElement, options: any) {\n        this.inputService = new InputService(htmlInputElement, options);\n    }\n\n    handleCut(event: any): void {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n\n    handleInput(event: any): void {\n        let keyCode = this.inputService.rawValue.charCodeAt(this.inputService.rawValue.length - 1);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n\n        if (rawValueLength != rawValueSelectionEnd || Math.abs(rawValueLength - storedRawValueLength) != 1) {\n            this.setCursorPosition(event);\n            return;\n        }\n\n        if (rawValueLength < storedRawValueLength) {\n            this.inputService.removeNumber(8);\n        }\n\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers) {\n                        return;\n                    }\n\n                    this.inputService.addNumber(keyCode);\n                    break;\n            }\n        }\n\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n\n    handleKeydown(event: any): void {\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n\n            if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() &&\n                this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\n                this.clearValue();\n            } else {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n\n    clearValue() {\n        this.setValue(this.inputService.isNullable() ? null : 0);\n        this.onModelChange(this.inputService.value);\n    }\n\n    handleKeypress(event: any): void {\n        let keyCode = event.which || event.charCode || event.keyCode;\n        event.preventDefault();\n        if (keyCode === 97 && event.ctrlKey) {\n            return;\n        }\n\n        switch (keyCode) {\n            case undefined:\n            case 9:\n            case 13:\n                return;\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers) {\n                    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n                    if (selectionRangeLength == this.inputService.rawValue.length) {\n                        this.setValue(null);\n                    }\n\n                    this.inputService.addNumber(keyCode);\n                }\n                break;\n        }\n\n        this.onModelChange(this.inputService.value);\n    }\n\n    handlePaste(event: any): void {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n\n    updateOptions(options: any): void {\n        this.inputService.updateOptions(options);\n    }\n\n    getOnModelChange(): Function {\n        return this.onModelChange;\n    }\n\n    setOnModelChange(callbackFunction: Function): void {\n        this.onModelChange = callbackFunction;\n    }\n\n    getOnModelTouched(): Function {\n        return this.onModelTouched;\n    }\n\n    setOnModelTouched(callbackFunction: Function) {\n        this.onModelTouched = callbackFunction;\n    }\n\n    setValue(value: number): void {\n        this.inputService.value = value;\n    }\n\n    private setCursorPosition(event: any): void {\n        setTimeout(function () {\n            event.target.setSelectionRange(event.target.value.length, event.target.value.length);\n        }, 0);\n    }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  DoCheck,\n  ElementRef,\n  forwardRef,\n  HostListener,\n  Inject,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  Input,\n  OnInit,\n  Optional\n} from \"@angular/core\";\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {CurrencyMaskConfig, CURRENCY_MASK_CONFIG, CurrencyMaskInputMode} from \"./currency-mask.config\";\nimport {InputHandler} from \"./input.handler\";\n\nexport const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyMaskDirective),\n  multi: true,\n};\n\n@Directive({\n    selector: \"[currencyMask]\",\n    providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]\n})\nexport class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit {\n\n  @Input() options: Partial<CurrencyMaskConfig> = {};\n\n  public inputHandler: InputHandler;\n  public keyValueDiffer: KeyValueDiffer<any, any>;\n\n  public optionsTemplate: CurrencyMaskConfig = {\n      align: \"right\",\n      allowNegative: true,\n      allowZero: true,\n      decimal: \".\",\n      precision: 2,\n      prefix: \"$ \",\n      suffix: \"\",\n      thousands: \",\",\n      nullable: false,\n      inputMode: CurrencyMaskInputMode.FINANCIAL\n  };\n\n  constructor(@Optional() @Inject(CURRENCY_MASK_CONFIG) private currencyMaskConfig: CurrencyMaskConfig,\n                                                        private elementRef: ElementRef,\n                                                        private keyValueDiffers: KeyValueDiffers) {\n    if (currencyMaskConfig) {\n        this.optionsTemplate = currencyMaskConfig;\n    }\n\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n\n  ngAfterViewInit() {\n    this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\n  }\n\n  ngDoCheck() {\n    if (this.keyValueDiffer.diff(this.options)) {\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n      this.inputHandler.updateOptions((<any>Object).assign({}, this.optionsTemplate, this.options));\n    }\n  }\n\n  ngOnInit() {\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, (<any>Object).assign({}, this.optionsTemplate, this.options));\n  }\n\n  @HostListener(\"blur\", [\"$event\"])\n  handleBlur(event: any) {\n    this.inputHandler.getOnModelTouched().apply(event);\n  }\n\n  @HostListener(\"cut\", [\"$event\"])\n  handleCut(event: any) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleCut(event);\n    }\n  }\n\n  @HostListener(\"input\", [\"$event\"])\n  handleInput(event: any) {\n    if (this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleInput(event);\n    }\n  }\n\n  @HostListener(\"keydown\", [\"$event\"])\n  handleKeydown(event: any) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleKeydown(event);\n    }\n  }\n\n  @HostListener(\"keypress\", [\"$event\"])\n  handleKeypress(event: any) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleKeypress(event);\n    }\n  }\n\n  @HostListener(\"paste\", [\"$event\"])\n  handlePaste(event: any) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handlePaste(event);\n    }\n  }\n\n  @HostListener(\"drop\", [\"$event\"])\n  handleDrop(event: any) {\n    if (!this.isChromeAndroid()) {\n      event.preventDefault();\n    }\n  }\n\n  isChromeAndroid(): boolean {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n\n  isReadOnly(): boolean {\n    return this.elementRef.nativeElement.hasAttribute('readonly')\n  }\n\n  registerOnChange(callbackFunction: Function): void {\n    this.inputHandler.setOnModelChange(callbackFunction);\n  }\n\n  registerOnTouched(callbackFunction: Function): void {\n    this.inputHandler.setOnModelTouched(callbackFunction);\n  }\n\n  setDisabledState(value: boolean): void {\n    this.elementRef.nativeElement.disabled = value;\n  }\n\n  writeValue(value: number): void {\n    this.inputHandler.setValue(value);\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {CurrencyMaskDirective} from \"./currency-mask.directive\";\nimport {CURRENCY_MASK_CONFIG, CurrencyMaskConfig} from \"./currency-mask.config\";\n\n@NgModule({\n  imports: [ CommonModule, FormsModule ],\n  declarations: [ CurrencyMaskDirective ],\n  exports: [ CurrencyMaskDirective ]\n})\nexport class NgxCurrencyModule {\n  static forRoot(config: CurrencyMaskConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxCurrencyModule,\n      providers: [{\n        provide: CURRENCY_MASK_CONFIG,\n        useValue: config,\n      }]\n    }\n  }\n}\n"]}